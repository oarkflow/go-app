server "Server App" {
  address      = "${env.APP_HOST}"
  read_timeout = 10
  write_timeout= 10
  health_check {
    enabled = true
	path = "/health"
  }
}

provider "master-sqlite" {
  driver  = "sqlite"
  type    = "database"
  dsn     = "file:app.db?cache=shared&mode=rwc"
  default = true
}

middleware "log" {
  type = "logger"
}

middleware "jwt" {
  type   = "jwt"
  guard  = "jwt"
  secret = "supersecret"
}

middleware "cors" {
  type          = "cors"
  allow_origins = "*" // allow all origins
}

middleware "ratelimit" {
  type   = "ratelimit"
  max    = 100
  window = 60
}

middleware "compress" {
  type = "compress"
}

global_middleware = ["log", "cors", "ratelimit", "compress"]

group "admin" {
  path       = "/admin"
  middleware = ["log", "jwt"]
}

route "login" {
  method  = "POST"
  path    = "/login"
  handler = "loginHandler"
  
  request {
    body = ["email", "password"]
  }
  
  response {
    fields = ["token"]
  }
}

route "logout" {
  method     = "POST"
  path       = "/logout"
  handler    = "logoutHandler"
  middleware = ["jwt"]
  response {
    fields = ["success"]
  }
}

route "profile" {
  method     = "GET"
  path       = "/me"
  handler    = "profileHandler"
  middleware = ["jwt"]
  response {
    fields = ["user"]
  }
}

route "adminProfile" {
  group   = "admin"
  method  = "GET"
  path    = "/profile"
  handler = "profileHandler"
  response {
    fields = ["user"]
  }
}

dag "loginHandler" {
  node "verify" {
    type   = "auth_verify"
    input  = ["email", "password"]
    output = ["user"]
  }
  
  node "token" {
    type   = "auth_token"
    input  = ["user"]
    output = ["token"]
  }
  
  edge {
    from = "verify"
    to   = "token"
  }
}

dag "logoutHandler" {
  node "revoke" {
    type   = "auth_revoke"
    output = ["success"]
  }
}

dag "profileHandler" {
  node "fetch" {
    type     = "db_query"
    query    = "SELECT id, name, email FROM users WHERE id = :id"
    input    = ["ctx_userid"]
    field_mapping = {
	  id    = "ctx_userid"
	}
    output   = ["user"]
    provider = "master-sqlite"
  }
}

model "user" {
  table    = "users"
  rest     = true
  prefix   = "users"
  provider = "master-sqlite"
  fields = [
    { name = "id", data_type = "TEXT" },
    { name = "name", data_type = "TEXT" },
    { name = "email", data_type = "TEXT" },
    { name = "password", data_type = "TEXT" }
  ]
}

auth {
  login {
    route            = "login"
    user_model       = "user"
    username_field   = "email"
    credential_model = "user"
    password_field   = "password"
  }
  logout {
    route = "logout"
  }
}

auth_guard "jwt" {
  name        = "jwt"
  placeholder = "header"
  key         = "Authorization"
  scheme      = "Bearer"
}

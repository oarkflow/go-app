server {
  address      = "0.0.0.0:8080"
  read_timeout = 10
  write_timeout= 10
}

provider "master-sqlite" {
  driver  = "sqlite"
  type    = "database"
  dsn     = "file:app.db?cache=shared&mode=rwc"
  default = true
}

middleware "log" {
  type = "logger"
}

middleware "jwt" {
  type   = "jwt"
  secret = "supersecret"
}

global_middleware = ["log"]

group "admin" {
  path       = "/admin"
  middleware = ["log"]
}

route "login" {
  method  = "POST"
  path    = "/login"
  handler = "loginHandler"

  request {
    body = ["email", "password"]
  }

  response {
    fields = ["token"]
  }
}

route "logout" {
  method     = "POST"
  path       = "/logout"
  handler    = "logoutHandler"
  middleware = ["jwt"]
  response {
    fields = ["success"]
  }
}

route "profile" {
  method     = "GET"
  path       = "/me"
  handler    = "profileHandler"
  middleware = ["jwt"]
  response {
    fields = ["user"]
  }
}

route "adminProfile" {
  group      = "admin"
  method     = "GET"
  path       = "/profile"
  handler    = "profileHandler"
  middleware = ["jwt"]
  response {
    fields = ["user"]
  }
}

dag "loginHandler" {
  node "verify" {
    type   = "auth_verify"
    input  = ["email", "password"]
    output = ["user"]
  }

  node "token" {
    type   = "auth_token"
    input  = ["user"]
    output = ["token"]
  }

  edge {
    from = "verify"
    to   = "token"
  }
}

dag "logoutHandler" {
  node "revoke" {
    type   = "auth_revoke"
    output = ["success"]
  }
}

dag "profileHandler" {
  node "fetch" {
    type     = "db_query"
    query    = "SELECT id, name, email FROM users WHERE id = ?"
    input    = ["ctx_userid"]
    output   = ["user"]
    provider = "master-sqlite"
  }
}

model "user" {
	table = "users"
	rest  = true
    prefix = "users"  // optional prefix for CRUD routes; if omitted, system will pluralize "user" to "users"
	fields = [
	  { name = "id", data_type = "TEXT" },
	  { name = "name", data_type = "TEXT" },
	  { name = "email", data_type = "TEXT" },
	  { name = "password", data_type = "TEXT" }
	]
}

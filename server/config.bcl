#############################################
# Productionâ€‘Ready HTTP Server Configuration #
#############################################

# 1. Core Server Settings
server "Server App" {
  address          = ":${env.APP_PORT}"   # host:port
  read_timeout     = 10            # seconds
  write_timeout    = 10            # seconds
  idle_timeout     = 120           # seconds
  header_timeout   = 5             # seconds
  shutdown_timeout = 30            # seconds
  body_limit = 10000000

  # TLS / HTTPS
  tls {
    cert_file   = "${env.TLS_CERT_PATH}"     # PEM
    key_file    = "${env.TLS_KEY_PATH}"      # PEM
    min_version = "TLS1.2"
    # cipher_suites = ["TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", ...]
  }

  # Health check endpoint
  health_check {
    enabled = true
    path    = "/health"
  }
  maintenance {
    enabled = true
    route    = "/maintenance"
    html    = "./public/maintenance.html"
  }
}

migrations {
  enabled  = true
  dir      = "./db/migrations"
  table    = "schema_migrations"
}


# 2. Data Provider Definitions
provider "master-sqlite" {
  driver  = "sqlite"
  type    = "database"
  dsn     = "file:app.db?cache=shared&mode=rwc"
  default = true
  pool = {
    max_open_conns = 10
    max_idle_conns = 5
    conn_max_lifetime = 300  # seconds
  }
}

# 3. Middleware Definitions
middleware "logger" {
  type   = "logger"
  format = "json"       # text | json
  level  = "info"       # debug | info | warn | error
  output = "stdout"
}

middleware "jwt" {
  type   = "jwt"
  guard  = "jwt"
  secret = "supersecret"
}

middleware "recover" {
  type   = "recover"
  format = "json"       # json | html
}

middleware "cors" {
  type               = "cors"
  allow_origins      = ["https://example.com"]
  allow_methods      = ["GET","POST","OPTIONS"]
  allow_headers      = ["Authorization","Content-Type"]
  expose_headers     = ["X-Total-Count"]
  allow_credentials  = true
  max_age            = 3600         # seconds
}

middleware "ratelimit" {
  type              = "ratelimit"
  max               = 100
  window            = 60            # seconds
  key               = "ip"         # or "userID"
}

middleware "compress" {
  type = "compress"
}

middleware "circuit_breaker" {
  type              = "circuit_breaker"
  failure_threshold = 5
  recovery_timeout  = 60              # seconds
}

middleware "request_id" {
  type        = "request_id"
  header_name = "X-Request-ID"
  generator   = "uuid"
}

# Order in which global middleware will be applied
global_middleware = ["request_id", "recover", "logger", "cors", "ratelimit", "compress"]

# 4. Observability / Monitoring
metrics {
  enabled   = true
  path      = "/metrics"
  provider  = "prometheus"
  namespace = "app_server"
}

tracing {
  enabled     = true
  provider    = "jaeger"
  endpoint    = "${env.JAEGER_AGENT_URL}"
  sampler     = "ratelimiting"
  sampler_arg = 100                   # traces/sec
}

# 5. Documentation / API Spec
docs {
  enabled = true
  path    = "/swagger/*"
  spec    = "/swagger/doc.json"
}

# 6. Feature Flags
features {
  beta_feature = false
  new_ui       = true
}

# 7. Authentication / Authorization
auth {
  login {
    route            = "login"
    user_model       = "user"
    username_field   = "email"
    credential_model = "user"
    password_field   = "password"
  }
  logout {
    route = "logout"
  }
}

auth_guard "jwt" {
  name        = "jwt"
  placeholder = "header"
  key         = "Authorization"
  scheme      = "Bearer"
}

route "static" {
  method  = "GET"
  path    = "/static/*"
  handler = "staticHandler"

  static {
    dir       = "./public"
    index     = "index.html"
    cache_max = 86400                  # seconds
  }
}

# 9. API Routes & DAG Handlers

route "login" {
  method  = "POST"
  path    = "/login"
  handler = "loginHandler"

  validation = [
    { field = "email",    required = true, type = "string" },
    { field = "password", required = true, type = "string" }
  ]

  error_format {
    code_field    = "code"
    message_field = "error"
  }

  response_format {
    envelope = "data"
  }

  version = "1"

  request {
    body = ["email","password"]
  }

  response {
    fields = ["token"]
  }
}

route "logout" {
  method     = "POST"
  path       = "/logout"
  handler    = "logoutHandler"
  middleware = ["jwt"]

  error_format {
    code_field    = "code"
    message_field = "error"
  }

  response_format {
    envelope = "data"
  }

  version = "1"

  response {
    fields = ["success"]
  }
}

route "profile" {
  method     = "GET"
  path       = "/me"
  handler    = "profileHandler"
  middleware = ["jwt"]

  error_format {
    code_field    = "code"
    message_field = "error"
  }

  response_format {
    envelope = "data"
  }

  version = "1"

  response {
    fields = ["user"]
  }
}

route "adminProfile" {
  group      = "admin"
  method     = "GET"
  path       = "/profile"
  handler    = "profileHandler"

  error_format {
    code_field    = "code"
    message_field = "error"
  }

  response_format {
    envelope = "data"
  }

  version = "1"

  response {
    fields = ["user"]
  }
}

# 10. Admin Group

group "admin" {
  path       = "/admin"
  middleware = ["logger","jwt"]
}

# 11. DAG / Workflow Definitions

dag "loginHandler" {
  version = "1"

  node "verify" {
    type   = "auth_verify"
    input  = ["email","password"]
    output = ["user"]
  }

  node "token" {
    type   = "auth_token"
    input  = ["user"]
    output = ["token"]
  }
  edge {
    from = "verify"
    to   = "token"
  }
}

dag "logoutHandler" {
  version = "1"

  node "revoke" {
    type   = "auth_revoke"
    output = ["success"]
  }
}

dag "profileHandler" {
  version = "1"

  node "fetch" {
    type          = "db_query"
    query         = "SELECT id, name, email FROM users WHERE id = :id"
    input         = ["ctx_userid"]
    field_mapping = { id = "ctx_userid" }
    output        = ["user"]
    provider      = "master-sqlite"
  }
}

# 12. Data Models

model "user" {
  table    = "users"
  rest     = true
  prefix   = "users"
  provider = "master-sqlite"

  fields = [
    { name = "id",       data_type = "TEXT" },
    { name = "name",     data_type = "TEXT" },
    { name = "email",    data_type = "TEXT" },
    { name = "password", data_type = "TEXT" }
  ]
}
